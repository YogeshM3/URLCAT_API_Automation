{"name": "test_UrlCat_Request_With_Newly_Added_UDI", "status": "broken", "statusDetails": {"message": "urllib3.util.ssl_match_hostname.CertificateError: hostname 'prourl.itsecure.co.in' doesn't match either of '*.itonlinesecure.in', 'itonlinesecure.in'", "trace": "snapshot = SnapshotAssertion(name='snapshot', num_executions=0)\n\n    def test_UrlCat_Request_With_Newly_Added_UDI(snapshot):\n        global df\n        # df = pd.read_csv(\"C:\\\\Automation\\\\Yogesh_Auotmation.csv\", encoding='windows-1254')\n        # df = pd.read_csv(\"C:\\\\Users\\\\yogesh.mantri\\\\PycharmProjects\\\\URLCat\\\\dataPayload\\\\Yogesh_Auotmation.csv\", encoding='windows-1254')\n        df = pd.read_csv(\"./URLCat/dataPayload/Automation_Payload.csv\", encoding='windows-1254')\n        pay = df.iloc[0, 1]\n        dict = {'necjsonRequest': pay}\n>       assertion.urlcat_category(snapshot, dict)\n\nURLCat\\testURLCATLookup.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nURLCat\\apiCode\\assertion.py:29: in urlcat_category\n    response = requests.request(\"POST\", ProdUrl, data=urlcat_category_payload)\nURLCat\\venv\\lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nURLCat\\venv\\lib\\site-packages\\requests\\sessions.py:587: in request\n    resp = self.send(prep, **send_kwargs)\nURLCat\\venv\\lib\\site-packages\\requests\\sessions.py:701: in send\n    r = adapter.send(request, **kwargs)\nURLCat\\venv\\lib\\site-packages\\requests\\adapters.py:521: in send\n    low_conn.endheaders()\n..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\http\\client.py:1277: in endheaders\n    self._send_output(message_body, encode_chunked=encode_chunked)\n..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\http\\client.py:1037: in _send_output\n    self.send(msg)\n..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\http\\client.py:975: in send\n    self.connect()\nURLCat\\venv\\lib\\site-packages\\urllib3\\connection.py:467: in connect\n    _match_hostname(cert, self.assert_hostname or server_hostname)\nURLCat\\venv\\lib\\site-packages\\urllib3\\connection.py:540: in _match_hostname\n    match_hostname(cert, asserted_hostname)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncert = {'OCSP': ('http://ocsp.digicert.com',), 'caIssuers': ('http://cacerts.digicert.com/RapidSSLGlobalTLSRSA4096SHA2562022C...),), (('organizationName', 'DigiCert, Inc.'),), (('commonName', 'RapidSSL Global TLS RSA4096 SHA256 2022 CA1'),)), ...}\nhostname = 'prourl.itsecure.co.in'\n\n    def match_hostname(cert, hostname):\n        \"\"\"Verify that *cert* (in decoded format as returned by\n        SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125\n        rules are followed, but IP addresses are not accepted for *hostname*.\n    \n        CertificateError is raised on failure. On success, the function\n        returns nothing.\n        \"\"\"\n        if not cert:\n            raise ValueError(\n                \"empty or no certificate, match_hostname needs a \"\n                \"SSL socket or SSL context with either \"\n                \"CERT_OPTIONAL or CERT_REQUIRED\"\n            )\n        try:\n            # Divergence from upstream: ipaddress can't handle byte str\n            host_ip = ipaddress.ip_address(_to_unicode(hostname))\n        except (UnicodeError, ValueError):\n            # ValueError: Not an IP address (common case)\n            # UnicodeError: Divergence from upstream: Have to deal with ipaddress not taking\n            # byte strings.  addresses should be all ascii, so we consider it not\n            # an ipaddress in this case\n            host_ip = None\n        except AttributeError:\n            # Divergence from upstream: Make ipaddress library optional\n            if ipaddress is None:\n                host_ip = None\n            else:  # Defensive\n                raise\n        dnsnames = []\n        san = cert.get(\"subjectAltName\", ())\n        for key, value in san:\n            if key == \"DNS\":\n                if host_ip is None and _dnsname_match(value, hostname):\n                    return\n                dnsnames.append(value)\n            elif key == \"IP Address\":\n                if host_ip is not None and _ipaddress_match(value, host_ip):\n                    return\n                dnsnames.append(value)\n        if not dnsnames:\n            # The subject is only checked when there is no dNSName entry\n            # in subjectAltName\n            for sub in cert.get(\"subject\", ()):\n                for key, value in sub:\n                    # XXX according to RFC 2818, the most specific Common Name\n                    # must be used.\n                    if key == \"commonName\":\n                        if _dnsname_match(value, hostname):\n                            return\n                        dnsnames.append(value)\n        if len(dnsnames) > 1:\n>           raise CertificateError(\n                \"hostname %r \"\n                \"doesn't match either of %s\" % (hostname, \", \".join(map(repr, dnsnames)))\nE               urllib3.util.ssl_match_hostname.CertificateError: hostname 'prourl.itsecure.co.in' doesn't match either of '*.itonlinesecure.in', 'itonlinesecure.in'\n\nURLCat\\venv\\lib\\site-packages\\urllib3\\util\\ssl_match_hostname.py:150: CertificateError"}, "attachments": [{"name": "log", "source": "e6979f42-5e6b-4126-a994-c596881657f2-attachment.txt", "type": "text/plain"}], "start": 1698654749064, "stop": 1698654749708, "uuid": "51d1a65d-b46d-4563-9dae-b6cbd7321f01", "historyId": "257be2bc86541b409b01e9979c7480b8", "testCaseId": "80b3c52c5e8f1807b63237d15050e11a", "fullName": "URLCat.testURLCATLookup#test_UrlCat_Request_With_Newly_Added_UDI", "labels": [{"name": "parentSuite", "value": "URLCat"}, {"name": "suite", "value": "testURLCATLookup"}, {"name": "host", "value": "QHPUNM7LP1029"}, {"name": "thread", "value": "7284-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "URLCat.testURLCATLookup"}]}